<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Hinzufügen</value>
  </data>
  <data name="BackgroundColor" xml:space="preserve">
    <value>Hintergrundfarbe</value>
  </data>
  <data name="BoundingBoxColor" xml:space="preserve">
    <value>Farbe der Bounding Boxes</value>
  </data>
  <data name="BoundingBoxes" xml:space="preserve">
    <value>Bounding Boxes</value>
  </data>
  <data name="CheckBox_ClearCanvasOnSave" xml:space="preserve">
    <value>Reinige Zeichenfläche nach dem Speichern 
der Objekte</value>
  </data>
  <data name="CheckBox_DrawBB" xml:space="preserve">
    <value>Zeichne Bounding Boxes</value>
  </data>
  <data name="CheckBox_DrawMABB" xml:space="preserve">
    <value>Zeichne Bounding Boxes minimaler Fläche</value>
  </data>
  <data name="CheckBox_ExportBB" xml:space="preserve">
    <value>Exportiere Bounding Boxes in Originalgröße</value>
  </data>
  <data name="CheckBox_ExportMABB" xml:space="preserve">
    <value>Exportiere Bounding Boxes minimaler Fläche 
in Originalgröße</value>
  </data>
  <data name="CheckBox_ExportRBB" xml:space="preserve">
    <value>Exportiere Bounding Boxes in 
definierten Ausgabegrößen </value>
  </data>
  <data name="CheckBox_ExportRMABB" xml:space="preserve">
    <value>Exportiere Bounding Boxes minimaler Fläche 
in definierten Ausgabegrößen exportieren</value>
  </data>
  <data name="CheckBox_RandomizeStrokeThickness" xml:space="preserve">
    <value>Zufällige Pinseldicke</value>
  </data>
  <data name="ChooseFolder" xml:space="preserve">
    <value>Ordner auswählen</value>
  </data>
  <data name="Colors" xml:space="preserve">
    <value>Farben</value>
  </data>
  <data name="Framerate" xml:space="preserve">
    <value>Bildwiederholrate</value>
  </data>
  <data name="InterpolationStepSize" xml:space="preserve">
    <value>Schrittweite der Interpolation</value>
  </data>
  <data name="MinimalAreaBoundingBoxColor" xml:space="preserve">
    <value>Farbe der Bounding Boxes minimaler Fläche</value>
  </data>
  <data name="Output" xml:space="preserve">
    <value>Ausgabe</value>
  </data>
  <data name="OutputFolder" xml:space="preserve">
    <value>Bitte wähle einen Ausgabeordner aus...</value>
  </data>
  <data name="Performance" xml:space="preserve">
    <value>Performance</value>
  </data>
  <data name="ResizeOutput" xml:space="preserve">
    <value>Ausgabegrößen</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Einstellungen</value>
  </data>
  <data name="Shapes" xml:space="preserve">
    <value>Objekte:</value>
  </data>
  <data name="Stroke" xml:space="preserve">
    <value>Pinsel</value>
  </data>
  <data name="StrokeColor" xml:space="preserve">
    <value>Pinselfarbe</value>
  </data>
  <data name="StrokeThickness" xml:space="preserve">
    <value>Pinseldicke</value>
  </data>
  <data name="ToggleButton_DetectStrokes" xml:space="preserve">
    <value>Objekte während dem Zeichnen erkennen</value>
  </data>
  <data name="ToolTip_ClearCanvasButton" xml:space="preserve">
    <value>Zeichenfläche reinigen | ENTF
Entferne einzelne Objekte mit rechter Maustaste</value>
  </data>
  <data name="ToolTip_DetectStrokes" xml:space="preserve">
    <value>Ausschalten hilft bei Performance-Einbrüchen</value>
  </data>
  <data name="ToolTip_Framerate" xml:space="preserve">
    <value>Niedrige Bildwiederholraten helfen bei Performance-Einbrüchen</value>
  </data>
  <data name="ToolTip_OpenGithubButton" xml:space="preserve">
    <value>Öffne Github Repository</value>
  </data>
  <data name="ToolTip_OpenSettingsButton" xml:space="preserve">
    <value>Einstellungen | mittlere Maustaste</value>
  </data>
  <data name="ToolTip_SaveShapesButton" xml:space="preserve">
    <value>Speichere gezeichnete Objekte in den Ausgabeordner | STRG + ENTER</value>
  </data>
  <data name="Watermark_ChooseFolder" xml:space="preserve">
    <value>Bitte wähle einen Ausgabeordner...</value>
  </data>
  <data name="Watermark_ShapeName" xml:space="preserve">
    <value>Name der gezeichneten Formen</value>
  </data>
</root>